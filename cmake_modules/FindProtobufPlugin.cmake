# Locate and configure the Google Protocol Buffers library.
#
# The following variables can be set and are optional:
#
#   PROTOBUF_SRC_ROOT_FOLDER - When compiling with MSVC, if this cache variable is set
#                              the protobuf-default VS project build locations
#                              (vsprojects/Debug & vsprojects/Release) will be searched
#                              for libraries and binaries.
#
# Defines the following variables:
#
#   PROTOBUF_FOUND - Found the Google Protocol Buffers library (libprotobuf & header files)
#   PROTOBUF_INCLUDE_DIRS - Include directories for Google Protocol Buffers
#   PROTOBUF_LIBRARIES - The protobuf libraries
# [New in CMake 2.8.5]
#   PROTOBUF_PROTOC_LIBRARIES - The protoc libraries
#   PROTOBUF_LITE_LIBRARIES - The protobuf-lite libraries
#
# The following cache variables are also available to set or use:
#   PROTOBUF_LIBRARY - The protobuf library
#   PROTOBUF_PROTOC_LIBRARY   - The protoc library
#   PROTOBUF_INCLUDE_DIR - The include directory for protocol buffers
#   PROTOBUF_PROTOC_EXECUTABLE - The protoc compiler
# [New in CMake 2.8.5]
#   PROTOBUF_LIBRARY_DEBUG - The protobuf library (debug)
#   PROTOBUF_PROTOC_LIBRARY_DEBUG   - The protoc library (debug)
#   PROTOBUF_LITE_LIBRARY - The protobuf lite library
#   PROTOBUF_LITE_LIBRARY_DEBUG - The protobuf lite library (debug)
#
#  ====================================================================
#  Example:
#
#   find_package(Protobuf REQUIRED)
#   include_directories(${PROTOBUF_INCLUDE_DIRS})
#
#   include_directories(${CMAKE_CURRENT_BINARY_DIR})
#   PROTOBUF_GENERATE_CPP(PROTO_SRCS PROTO_HDRS foo.proto)
#   add_executable(bar bar.cc ${PROTO_SRCS} ${PROTO_HDRS})
#   target_link_libraries(bar ${PROTOBUF_LIBRARIES})
#
# NOTE: You may need to link against pthreads, depending
# on the platform.
#  ====================================================================
#
# PROTOBUF_GENERATE_CPP (public function)
#   SRCS = Variable to define with autogenerated
#          source files
#   HDRS = Variable to define with autogenerated
#          header files
#   ARGN = proto files
#
#  ====================================================================


#=============================================================================
# Copyright 2009 Kitware, Inc.
# Copyright 2009-2011 Philip Lowman <philip@yhbt.com>
# Copyright 2008 Esben Mose Hansen, Ange Optimization ApS
#
# Distributed under the OSI-approved BSD License (the "License");
# see accompanying file Copyright.txt for details.
#
# This software is distributed WITHOUT ANY WARRANTY; without even the
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the License for more information.
#=============================================================================
# (To distribute this file outside of CMake, substitute the full
#  License text for the above reference.)

function(PROTOBUF_GENERATE_CPP SRCS HDRS)
  PROTOBUF_GENERATE_MULTI(PLUGIN "cpp"
                          PLUGIN_NAME "C++"
                          PROTOS ${ARGN}
                          OUTPUT_STRUCT "_SRCS:.pb.cc;_HDRS:.pb.h" )
  set(${SRCS} ${_SRCS} PARENT_SCOPE)
  set(${HDRS} ${_HDRS} PARENT_SCOPE)
endfunction()

function(PROTOBUF_GENERATE_PYTHON SRCS)
  PROTOBUF_GENERATE_MULTI(PLUGIN "python"
                          PLUGIN_NAME "Python"
                          PROTOS ${ARGN}
                          OUTPUT_STRUCT "_SRCS:_pb2.py" )
  set(${SRCS} ${_SRCS} PARENT_SCOPE)
endfunction()

function(PROTOBUF_GENERATE_MULTI)
  CMAKE_PARSE_ARGUMENTS(OPTIONS "" "PLUGIN;PLUGIN_NAME"
                        "PROTOS;OUTPUT_STRUCT;FLAGS;DEPENDS" ${ARGN})
  if(NOT OPTIONS_PROTOS)
    message(SEND_ERROR "Error: PROTOBUF_GENERATE_MULTI() called without any proto files")
    return()
  endif(NOT OPTIONS_PROTOS)
  _protobuf_generate_path(INCLUDE_FLAG ${OPTIONS_PROTOS})

  foreach(FIL ${OPTIONS_PROTOS})
    get_filename_component(FIL_WE ${FIL} NAME_WE)
    set(OUTPUTS)
    foreach(OUTPUT_ITEM_STR ${OPTIONS_OUTPUT_STRUCT})
      string(REPLACE ":" ";" OUTPUT_ITEM ${OUTPUT_ITEM_STR})
      list(LENGTH OUTPUT_ITEM OUTPUT_ITEM_LENGTH)
      if(NOT ${OUTPUT_ITEM_LENGTH} EQUAL 2)
        message(SEND_ERROR "Internal Error: each item in output struct"
                           " is a colon separated list of length 2: "
                           ${OUTPUT_ITEM})
        return()
      endif()
      list(GET OUTPUT_ITEM 0 VARNAME)
      list(GET OUTPUT_ITEM 1 SUFFIX)
      set(OUTFILE "${CMAKE_CURRENT_BINARY_DIR}/${FIL_WE}${SUFFIX}")
      list(APPEND OUTPUTS ${OUTFILE})
      list(APPEND _${VARNAME} ${OUTFILE})
    endforeach()
    PROTOBUF_GENERATE_SINGLE(PLUGIN ${OPTIONS_PLUGIN} FILE ${FIL}
                             PLUGIN_NAME ${OPTIONS_PLUGIN_NAME}
                             OUTPUTS ${OUTPUTS}
                             DEPENDS ${OPTIONS_DEPENDS}
                             FLAGS ${INCLUDE_FLAG} ${OPTIONS_FLAGS})
  endforeach()

  # Propagate output variables to parent scope
  foreach(OUTPUT_ITEM_STR ${OPTIONS_OUTPUT_STRUCT})
    string(REPLACE ":" ";" OUTPUT_ITEM ${OUTPUT_ITEM_STR})
    list(GET OUTPUT_ITEM 0 VARNAME)
    set(${VARNAME} ${_${VARNAME}} PARENT_SCOPE)
  endforeach()
endfunction()

function(_protobuf_generate_path IPATH)
  if(PROTOBUF_GENERATE_CPP_APPEND_PATH)
    # Create an include path for each file specified
    foreach(FIL ${ARGN})
      get_filename_component(ABS_FIL ${FIL} ABSOLUTE)
      get_filename_component(ABS_PATH ${ABS_FIL} PATH)
      list(FIND _protobuf_include_path ${ABS_PATH} _contains_already)
      if(${_contains_already} EQUAL -1)
          list(APPEND _protobuf_include_path -I ${ABS_PATH})
      endif()
    endforeach()
  else()
    set(_protobuf_include_path -I ${CMAKE_CURRENT_SOURCE_DIR})
  endif()
  set(${IPATH} ${_protobuf_include_path} PARENT_SCOPE)
endfunction()

include(${CMAKE_ROOT}/Modules/CMakeParseArguments.cmake)

function(PROTOBUF_GENERATE_SINGLE)
  CMAKE_PARSE_ARGUMENTS(OPTIONS "" "PLUGIN;PLUGIN_NAME;FILE" "FLAGS;OUTPUTS;DEPENDS"
                        ${ARGN})
  if(NOT OPTIONS_PLUGIN_NAME)
    set(OPTIONS_PLUGIN_NAME ${OPTIONS_PLUGIN})
  endif(NOT OPTIONS_PLUGIN_NAME)
  get_filename_component(ABS_FILE ${OPTIONS_FILE} ABSOLUTE)
  add_custom_command(
    OUTPUT ${OPTIONS_OUTPUTS}
    COMMAND  ${PROTOBUF_PROTOC_EXECUTABLE}
    ARGS --${OPTIONS_PLUGIN}_out  ${CMAKE_CURRENT_BINARY_DIR} ${OPTIONS_FLAGS}
         ${ABS_FILE}
    DEPENDS ${OPTIONS_FILE} ${OPTIONS_DEPENDS}
    COMMENT "Running ${OPTIONS_PLUGIN_NAME} protocol buffer compiler on ${OPTIONS_FILE}"
    VERBATIM )
  set_source_files_properties(${OUTPUTS} PROPERTIES GENERATED TRUE)
endfunction()

# Internal function: search for normal library as well as a debug one
#    if the debug one is specified also include debug/optimized keywords
#    in *_LIBRARIES variable
function(_protobuf_find_libraries name filename)
   find_library(${name}_LIBRARY
       NAMES ${filename}
       PATHS ${PROTOBUF_SRC_ROOT_FOLDER}/vsprojects/Release)
   mark_as_advanced(${name}_LIBRARY)

   find_library(${name}_LIBRARY_DEBUG
       NAMES ${filename}
       PATHS ${PROTOBUF_SRC_ROOT_FOLDER}/vsprojects/Debug)
   mark_as_advanced(${name}_LIBRARY_DEBUG)

   if(NOT ${name}_LIBRARY_DEBUG)
      # There is no debug library
      set(${name}_LIBRARY_DEBUG ${${name}_LIBRARY} PARENT_SCOPE)
      set(${name}_LIBRARIES     ${${name}_LIBRARY} PARENT_SCOPE)
   else()
      # There IS a debug library
      set(${name}_LIBRARIES
          optimized ${${name}_LIBRARY}
          debug     ${${name}_LIBRARY_DEBUG}
          PARENT_SCOPE
      )
   endif()
endfunction()

#
# Main.
#

# By default have PROTOBUF_GENERATE_CPP macro pass -I to protoc
# for each directory where a proto file is referenced.
if(NOT DEFINED PROTOBUF_GENERATE_CPP_APPEND_PATH)
  set(PROTOBUF_GENERATE_CPP_APPEND_PATH TRUE)
endif()


# Google's provided vcproj files generate libraries with a "lib"
# prefix on Windows
if(MSVC)
    set(PROTOBUF_ORIG_FIND_LIBRARY_PREFIXES "${CMAKE_FIND_LIBRARY_PREFIXES}")
    set(CMAKE_FIND_LIBRARY_PREFIXES "lib" "")

    find_path(PROTOBUF_SRC_ROOT_FOLDER protobuf.pc.in)
endif()

# The Protobuf library
_protobuf_find_libraries(PROTOBUF protobuf)
#DOC "The Google Protocol Buffers RELEASE Library"

_protobuf_find_libraries(PROTOBUF_LITE protobuf-lite)

# The Protobuf Protoc Library
_protobuf_find_libraries(PROTOBUF_PROTOC protoc)

# Restore original find library prefixes
if(MSVC)
    set(CMAKE_FIND_LIBRARY_PREFIXES "${PROTOBUF_ORIG_FIND_LIBRARY_PREFIXES}")
endif()


# Find the include directory
find_path(PROTOBUF_INCLUDE_DIR
    google/protobuf/service.h
    PATHS ${PROTOBUF_SRC_ROOT_FOLDER}/src
)
mark_as_advanced(PROTOBUF_INCLUDE_DIR)

# Find the protoc Executable
find_program(PROTOBUF_PROTOC_EXECUTABLE
    NAMES protoc
    DOC "The Google Protocol Buffers Compiler"
    PATHS
    ${PROTOBUF_SRC_ROOT_FOLDER}/vsprojects/Release
    ${PROTOBUF_SRC_ROOT_FOLDER}/vsprojects/Debug
)
mark_as_advanced(PROTOBUF_PROTOC_EXECUTABLE)


include(${CMAKE_ROOT}/Modules/FindPackageHandleStandardArgs.cmake)
FIND_PACKAGE_HANDLE_STANDARD_ARGS(PROTOBUF DEFAULT_MSG
    PROTOBUF_LIBRARY PROTOBUF_INCLUDE_DIR)

if(PROTOBUF_FOUND)
    set(PROTOBUF_INCLUDE_DIRS ${PROTOBUF_INCLUDE_DIR})
endif()
